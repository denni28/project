# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestLocation():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_location(self):
    # Test name: location
    # Step # | name | target | value
    # 1 | open | https://homedeco276986908.wordpress.com/ | 
    self.driver.get("https://homedeco276986908.wordpress.com/")
    # 2 | setWindowSize | 1936x1056 | 
    self.driver.set_window_size(1936, 1056)
    # 3 | selectFrame | index=1 | 
    self.driver.switch_to.frame(1)
    # 4 | click | css=.is-primary | 
    self.driver.find_element(By.CSS_SELECTOR, ".is-primary").click()
    # 5 | selectFrame | relative=parent | 
    self.driver.switch_to.default_content()
    # 6 | runScript | window.scrollTo(0,2619) | 
    self.driver.execute_script("window.scrollTo(0,2619)")
    # 7 | click | linkText=Find stores | 
    self.vars["window_handles"] = self.driver.window_handles
    # 8 | selectWindow | handle=${win2758} | 
    self.driver.find_element(By.LINK_TEXT, "Find stores").click()
    self.vars["win2758"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win2758"])
    assert "Page not found." not in self.driver.page_source
  
